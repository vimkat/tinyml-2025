/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 05.07.2025 17:51:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1616;
#else
constexpr int kTensorArenaSize = 592;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,47 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[10] = { 0, 0, 0, -0.0034564870875328779, 0.040261588990688324, 0.12716355919837952, 0, -0.13756634294986725, -0.096772268414497375, -0.078403852880001068, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data2[20] = { -0.014867862686514854, 0.086410686373710632, -0.10359866172075272, -0.017392389476299286, 0, 0, 0, 0.12486828118562698, -0.14886298775672913, 0, -0.0022079446353018284, 0.0087867854163050652, 0, 0, 0, -0.10384750366210938, 0, -0.057085227221250534, 0, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) float tensor_data3[3] = { 0.027923446148633957, 0.13647741079330444, -0.13965113461017609, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data4[20*47] = { 
  -0.016114372760057449, -0.05620262399315834, -0.080215230584144592, 0.22912104427814484, 0.068699486553668976, 0.12839595973491669, 0.069624528288841248, -0.20417584478855133, 0.082924574613571167, -0.25072896480560303, -0.024124214425683022, 0.090487509965896606, -0.27563023567199707, -0.20647752285003662, -0.07898392528295517, 0.24471527338027954, 0.058466672897338867, 0.19843952357769012, -0.15764187276363373, -0.15682244300842285, 0.23870657384395599, -0.091462463140487671, 0.23037099838256836, 0.037144266068935394, -0.28538221120834351, 0.17233733832836151, -0.1583804190158844, -0.14416950941085815, -0.19019125401973724, -0.2796575129032135, 0.055418491363525391, 0.07579098641872406, 0.18621072173118591, -0.25814086198806763, -0.26445403695106506, 0.14119072258472443, -0.19836601614952087, 0.19740557670593262, -0.042586632072925568, -0.20431207120418549, 0.11732963472604752, -0.022603889927268028, -0.20645241439342499, -0.10421304404735565, -0.26986193656921387, 0.22777311503887177, -0.10036680102348328, 
  -0.29051157832145691, -0.021104611456394196, 0.23999053239822388, 0.035756651312112808, -0.087432302534580231, 0.047848790884017944, 0.091709330677986145, 0.087220810353755951, 0.1285872608423233, 0.27030348777770996, -0.1898554265499115, 0.12179525941610336, 0.038681749254465103, 0.053028028458356857, 0.17984017729759216, -0.15941691398620605, 0.22864328324794769, 0.14402097463607788, 0.29761311411857605, -0.17744119465351105, -0.05007798969745636, -0.030254792422056198, 0.24189169704914093, -0.057034488767385483, 0.14927816390991211, 0.14174135029315948, -0.17393265664577484, 0.18322649598121643, -0.5920255184173584, -0.10177172720432281, 0.14681482315063477, 0.087127573788166046, -0.20267073810100555, 0.27321183681488037, 0.93928903341293335, -0.82153904438018799, -0.10018735378980637, 0.26927423477172852, 0.03972470760345459, -0.12462259083986282, -0.48333626985549927, 0.089608810842037201, -0.59920001029968262, 0.29545807838439941, 0.29404214024543762, -0.57145899534225464, -0.28753766417503357, 
  0.17622697353363037, -0.053757242858409882, -0.26789543032646179, -0.22430436313152313, 0.11280449479818344, -0.17006422579288483, 0.16623935103416443, 0.23330977559089661, 0.26740196347236633, -0.040328893810510635, -0.23780837655067444, 0.033131200820207596, -0.22985346615314484, 0.12802959978580475, -0.1871178150177002, 0.1906285285949707, 0.081082232296466827, 0.15879587829113007, -0.011075264774262905, 0.11084827035665512, 0.27891260385513306, -0.29025948047637939, 0.14846156537532806, -0.24666318297386169, 0.021174585446715355, -0.089707277715206146, 0.19176562130451202, -0.31693330407142639, 0.13390474021434784, -0.31697934865951538, -0.14671517908573151, 0.20645968616008759, 0.44036862254142761, -0.34190425276756287, -0.55552983283996582, 0.44176247715950012, -0.33151501417160034, -0.0032119783572852612, 0.12460987269878387, -0.38298818469047546, -0.32106724381446838, -0.4273185133934021, 0.0544867143034935, -0.1515752375125885, 5.2080838941037655e-05, -0.31844255328178406, -0.45886054635047913, 
  -0.25684529542922974, 0.14251981675624847, -0.16851866245269775, 0.16298873722553253, -0.036361329257488251, 0.15962021052837372, -0.040826782584190369, 0.27360254526138306, 0.13444018363952637, -0.26198592782020569, 0.22811907529830933, 0.22406962513923645, 0.13115178048610687, 0.16995632648468018, 0.11467920988798141, -0.078138679265975952, -0.23744396865367889, -0.15540392696857452, 0.08611733466386795, 0.17396785318851471, -0.2052949070930481, 0.10814882814884186, -0.20261821150779724, -0.12263518571853638, 0.16653786599636078, 0.13796767592430115, -0.32649299502372742, -0.26778009533882141, 0.067137129604816437, 0.2082178145647049, 0.0050169816240668297, 0.023563574999570847, 0.17801369726657867, -0.21215188503265381, 0.46436432003974915, -0.12229231745004654, 0.32461503148078918, -0.074755273759365082, 0.0037818222772330046, 0.13397936522960663, -0.70007747411727905, -0.12948298454284668, -0.52745556831359863, 0.21584008634090424, 0.30757802724838257, -0.6476556658744812, -0.65566468238830566, 
  0.24066174030303955, 0.059902310371398926, 0.047473877668380737, -0.18681567907333374, -0.23527541756629944, -0.2220478355884552, 0.24719053506851196, -0.071330025792121887, -0.13977575302124023, 0.17364901304244995, -0.086859509348869324, 0.053748369216918945, -0.18589979410171509, -0.13151136040687561, -0.20475286245346069, 0.15916833281517029, 0.17083215713500977, 0.19388294219970703, -0.02572929859161377, -0.069283276796340942, -0.0333232581615448, 0.27135252952575684, -0.059995770454406738, -0.047802001237869263, -0.094933241605758667, 0.012682348489761353, 0.21331113576889038, 0.19978165626525879, -0.27206122875213623, -0.23555019497871399, 0.13366040587425232, -0.19205878674983978, 0.26186418533325195, -0.21318276226520538, -0.095558896660804749, -0.14574003219604492, -0.092596113681793213, -0.27293509244918823, 0.062567353248596191, 0.17015305161476135, 0.028678089380264282, 0.087945044040679932, -0.25959405303001404, -0.10753406584262848, 0.16435229778289795, -0.18482786417007446, 0.21615111827850342, 
  -0.088377341628074646, 0.22179317474365234, 0.052397549152374268, -0.012841194868087769, -0.099998921155929565, -0.23450943827629089, 0.02867475152015686, 0.29493427276611328, -0.11490096151828766, 0.064484298229217529, -0.27599054574966431, -0.10677863657474518, -0.29202353954315186, 0.13764917850494385, 0.051732242107391357, -0.0049956738948822021, -0.26731771230697632, 0.084488779306411743, -0.091192722320556641, 0.0250224769115448, -0.23038463294506073, -0.24449707567691803, -0.028348982334136963, -0.14785149693489075, 0.21648520231246948, -0.077055513858795166, 0.080697447061538696, -0.041825860738754272, -0.14055372774600983, 0.29208791255950928, -0.057514667510986328, -0.030336499214172363, 0.22882086038589478, -0.18079617619514465, 0.068020492792129517, -0.27566498517990112, 0.20145034790039062, -0.17186510562896729, 0.12078955769538879, 0.25885981321334839, 0.20278418064117432, 0.11264440417289734, -0.20422637462615967, -0.080371171236038208, 0.050436288118362427, -0.29067990183830261, -0.22064200043678284, 
  0.14402925968170166, -0.083474203944206238, -0.10565312206745148, -0.16179513931274414, -0.18305280804634094, -0.28966748714447021, -0.097152933478355408, 0.21050721406936646, -0.1041557639837265, 0.0247059166431427, -0.011556774377822876, -0.022237569093704224, 0.0029312372207641602, 0.17234876751899719, 0.11667552590370178, -0.046888738870620728, -0.11942875385284424, -0.15053686499595642, 0.29042267799377441, 0.22930514812469482, -0.14026832580566406, 0.056513160467147827, -0.13279689848423004, 0.19152617454528809, -0.11787188053131104, -0.028654187917709351, 0.29650706052780151, -0.24510395526885986, 0.23942661285400391, 0.075720608234405518, 0.19810420274734497, -0.27471286058425903, 0.0034756958484649658, -0.036533594131469727, -0.23083975911140442, 0.1721881628036499, -0.26881200075149536, 0.12169730663299561, -0.23859286308288574, 0.29626530408859253, -0.031692743301391602, 0.06404566764831543, -0.022972792387008667, 0.013728231191635132, -0.14678749442100525, -0.25384902954101562, 0.28624612092971802, 
  0.23561751842498779, -0.27372059226036072, 0.10103064030408859, 0.26924341917037964, 0.27412211894989014, 0.10203178226947784, 0.098087586462497711, 0.1371595710515976, -0.077309750020503998, 0.26514813303947449, -0.046517368406057358, 0.30175057053565979, -0.087764337658882141, 0.1327529102563858, -0.17620989680290222, -0.26782414317131042, -0.081085845828056335, -0.14113961160182953, -0.18274825811386108, 0.29250192642211914, 0.26134690642356873, -0.17285829782485962, -0.14070668816566467, 0.010704159736633301, -0.049410585314035416, 0.30055657029151917, -0.018357345834374428, 0.49685373902320862, -0.7351195216178894, 0.073296666145324707, 0.12576021254062653, 0.21385107934474945, -0.30835810303688049, -0.12792843580245972, 0.488282710313797, -1.0379312038421631, 0.062312226742506027, 0.16488315165042877, 0.23990465700626373, 0.070587038993835449, 0.37380862236022949, 0.66485917568206787, -0.30525815486907959, 0.41085514426231384, 0.24870884418487549, 0.09644075483083725, 0.21604278683662415, 
  0.13757684826850891, 0.25978514552116394, 0.15297476947307587, -0.07484513521194458, -0.27888578176498413, 0.15918867290019989, -0.059412673115730286, -0.1995261162519455, -0.048791583627462387, -0.071517236530780792, -0.0048715597949922085, 0.15679967403411865, 0.14706984162330627, -0.13230600953102112, 0.023125443607568741, -0.15103757381439209, 0.097208328545093536, -0.16200074553489685, 0.26793074607849121, 0.036144942045211792, 0.24687285721302032, 0.1764206737279892, 0.23980425298213959, 0.09673888236284256, 0.15812486410140991, 0.16433566808700562, 0.20493701100349426, -0.36297136545181274, 0.91803556680679321, -0.41651415824890137, 0.0032792217098176479, -0.14866058528423309, 0.42806336283683777, -0.12460915744304657, -0.95960372686386108, 0.93860119581222534, -0.42435556650161743, 0.0079965414479374886, -0.22101940214633942, -0.14334379136562347, -0.37665900588035583, -0.70583587884902954, 0.60761898756027222, -0.26745343208312988, -0.45010209083557129, 0.29955506324768066, -0.023780554533004761, 
  -0.24803099036216736, 0.13317996263504028, -0.25207161903381348, -0.019273221492767334, -0.17243902385234833, 0.1762358546257019, -0.27054131031036377, -0.0018132925033569336, -0.16254320740699768, -0.29888492822647095, -0.25354015827178955, -0.20382462441921234, -0.29793596267700195, -0.077101379632949829, -0.18955120444297791, 0.23224592208862305, -0.032245457172393799, 0.17362126708030701, 0.20927238464355469, -0.18940916657447815, -0.061758056282997131, 0.18758687376976013, 0.057935744524002075, 0.27682685852050781, 0.29818326234817505, 0.20028558373451233, 0.015756428241729736, 0.087830245494842529, -0.0082128047943115234, 0.13432902097702026, -0.1307092010974884, -0.084185540676116943, -0.21651148796081543, -0.0090511441230773926, 0.20838910341262817, 0.090589702129364014, 0.20080643892288208, 0.22448903322219849, -0.042971193790435791, 0.043261021375656128, 0.066992253065109253, 0.1243249773979187, -0.16111890971660614, 0.071633309125900269, -0.12580122053623199, -0.29698944091796875, 0.191668301820755, 
  0.28302815556526184, 0.067024663090705872, 0.13196103274822235, -0.28720039129257202, -0.23649848997592926, -0.12097141891717911, 0.1705574244260788, 0.045763567090034485, -0.020358823239803314, 0.096265532076358795, -0.22727583348751068, 0.087096318602561951, 0.076713539659976959, -0.23258842527866364, 0.13863138854503632, -0.17439104616641998, -0.0073548327200114727, -0.0048355679027736187, 0.10279519855976105, 0.062089972198009491, -0.25460302829742432, 0.13609491288661957, -0.274497389793396, 0.22958086431026459, 0.24269460141658783, -0.055463600903749466, -0.1435827761888504, -0.093678757548332214, 0.21297885477542877, 0.19905419647693634, -0.28675743937492371, -0.23720510303974152, -0.23330461978912354, -0.066591851413249969, 0.2981208860874176, 0.26336249709129333, -0.0866069495677948, -0.23398011922836304, -0.23451630771160126, 0.080873005092144012, 0.1109267845749855, -0.037351842969655991, 0.017246942967176437, -0.094880558550357819, -0.099282793700695038, 0.20329152047634125, 0.019991163164377213, 
  -0.059438679367303848, 0.081607133150100708, 0.24494574964046478, -0.10861831158399582, -0.2461097240447998, -0.28350552916526794, 0.27580973505973816, -0.13535031676292419, 0.19889456033706665, -0.087631098926067352, 0.23543359339237213, 0.25396379828453064, 0.17017561197280884, 0.25146853923797607, -0.12860305607318878, 0.11579171568155289, -0.14192129671573639, -0.12297024577856064, 0.24852699041366577, -0.01069153007119894, -0.085614867508411407, -0.08243861049413681, 0.26515984535217285, -0.0079332161694765091, 0.071941323578357697, 0.09872812032699585, 0.27029424905776978, 0.63687926530838013, 0.41438189148902893, 0.09067448228597641, -0.16804009675979614, -0.017902618274092674, -0.012437629513442516, -0.057381171733140945, 0.071294263005256653, -0.028380082920193672, -0.24674086272716522, -0.130454421043396, 0.097326666116714478, 0.22196686267852783, 0.58024442195892334, 0.64533489942550659, 0.65780824422836304, -0.042726647108793259, -0.1844232976436615, 0.28782626986503601, 0.66360586881637573, 
  -0.1363743394613266, -0.28361630439758301, 0.0030979812145233154, -0.095258593559265137, 0.17993563413619995, -0.25623366236686707, -0.17722794413566589, -0.28856509923934937, -0.24010057747364044, 0.14223536849021912, -0.068891227245330811, -0.27499967813491821, 0.072877407073974609, 0.15811958909034729, -0.10310289263725281, 0.21853995323181152, 0.037839174270629883, -0.10041829943656921, 0.24645829200744629, -0.080802679061889648, 0.13883012533187866, 0.16664126515388489, -0.1860215812921524, 0.18508964776992798, 0.14866727590560913, -0.09424610435962677, 0.020773887634277344, -0.14316610991954803, 0.24825519323348999, -0.078344255685806274, -0.12642186880111694, 0.070359259843826294, -0.2872655987739563, 0.26624047756195068, 0.18305402994155884, 0.18344393372535706, 0.23908007144927979, -0.19547790288925171, -0.25112241506576538, -0.18486183881759644, -0.035938829183578491, 0.045489400625228882, -0.23975269496440887, -0.14501193165779114, -0.29635095596313477, -0.11732491850852966, 0.27296251058578491, 
  0.070174127817153931, -0.29798197746276855, -0.16220517456531525, -0.016228675842285156, 0.26500481367111206, 0.28752321004867554, -0.25042092800140381, 0.27627801895141602, -0.040904492139816284, 0.069971710443496704, 0.056038826704025269, 0.078436374664306641, 0.26197463274002075, 0.079529255628585815, -0.057069957256317139, -0.21117733418941498, -0.29831081628799438, -0.048353642225265503, -0.24068692326545715, -0.11044703423976898, -0.22757111489772797, -0.23496976494789124, -0.015409976243972778, -0.0968208909034729, -0.12712855637073517, -0.2973918616771698, -0.20043455064296722, 0.25461024045944214, -0.048758327960968018, 0.022152304649353027, 0.090380340814590454, -0.28804796934127808, -0.22136282920837402, -0.28676408529281616, -0.04192960262298584, 0.071942836046218872, 0.13353520631790161, -0.021868348121643066, 0.23930150270462036, -0.091366663575172424, 0.27484917640686035, 0.14463722705841064, 0.24340808391571045, -0.21480676531791687, 0.24796169996261597, -0.14600223302841187, -0.014508217573165894, 
  0.26939481496810913, -0.25136220455169678, -0.16138625144958496, 0.056959658861160278, 0.019763171672821045, -0.17728780210018158, -0.13342183828353882, 0.10044482350349426, 0.13922080397605896, 0.097627192735671997, 0.28569149971008301, -0.29507476091384888, -0.25514969229698181, 0.28627270460128784, -0.29184272885322571, -0.11522360146045685, -0.26341021060943604, 0.038262337446212769, 0.16657912731170654, -0.23536083102226257, 0.24864780902862549, 0.28690636157989502, -0.15063633024692535, 0.214030921459198, -0.27967885136604309, -0.17661479115486145, -0.04412609338760376, -0.24468864500522614, 0.23199582099914551, -0.083097919821739197, 0.29744940996170044, -0.16170980036258698, -0.13621893525123596, 0.18186637759208679, -0.046491116285324097, -0.19730010628700256, -0.23735392093658447, 0.06704181432723999, 0.23558300733566284, -0.27478215098381042, -0.29696127772331238, 0.24131357669830322, -0.28568339347839355, 0.1909005343914032, -0.047348707914352417, 0.18055009841918945, -0.11100867390632629, 
  -0.017094086855649948, 0.23383776843547821, -0.23773419857025146, -0.29603472352027893, -0.29461604356765747, 0.064012773334980011, -0.053188525140285492, 0.031619828194379807, 0.090940169990062714, 0.081478074193000793, -0.035085070878267288, 0.097314402461051941, -0.18267099559307098, 0.12177047878503799, 0.12283613532781601, 0.21316488087177277, 0.032049458473920822, 0.1142444983124733, 0.087002724409103394, 0.15839062631130219, -0.28832119703292847, 0.23174214363098145, -0.25920936465263367, 0.11346655339002609, 0.051026925444602966, -0.014712424948811531, -0.22598233819007874, -0.57233667373657227, 0.22223564982414246, -0.25036171078681946, 0.081347480416297913, -0.095774896442890167, 0.17536337673664093, 0.024508090689778328, -0.50840765237808228, 0.58547621965408325, -0.078220397233963013, -0.25626960396766663, 0.027243988588452339, 0.10242483019828796, -0.30271452665328979, -0.71954739093780518, 0.40191870927810669, -0.31554585695266724, 0.10206060856580734, -0.45204648375511169, -0.5799141526222229, 
  0.0039844810962677002, -0.19080713391304016, -0.1180000901222229, -0.021492272615432739, 0.24053680896759033, -0.070926696062088013, -0.099890545010566711, -0.21473315358161926, 0.10800382494926453, -0.26147770881652832, -0.25943565368652344, -0.093752592802047729, 0.068870961666107178, 0.1446700394153595, -0.10307912528514862, 0.10828006267547607, -0.23448503017425537, -0.14795017242431641, 0.12902897596359253, -0.09618668258190155, -0.24935412406921387, -0.17137867212295532, 0.1122017502784729, -0.1267002671957016, 0.12322214245796204, -0.097773805260658264, -0.052752643823623657, 0.22704005241394043, -0.20821464061737061, 0.21391820907592773, 0.10739994049072266, -0.0024298727512359619, 0.23062694072723389, -0.1781405508518219, -0.089101240038871765, -0.15711553394794464, 0.08773493766784668, -0.25473877787590027, -0.1327219158411026, 0.010438412427902222, -0.0012077689170837402, -0.050031095743179321, 0.050776124000549316, 0.21601599454879761, -0.033459872007369995, -0.23785620927810669, 0.23090803623199463, 
  -0.077312283217906952, 0.12549819052219391, 0.24321466684341431, 0.18857243657112122, 0.19461598992347717, -0.1128455251455307, -0.13714735209941864, 0.22681361436843872, 0.081007793545722961, -0.059454463422298431, -0.12631025910377502, 0.26803505420684814, -0.1262923926115036, 0.18955990672111511, -0.23392307758331299, -0.12047880887985229, -0.22876882553100586, 0.056298553943634033, 0.25228860974311829, -0.18243789672851562, 0.13742847740650177, -0.14705395698547363, -0.24086226522922516, 0.27098143100738525, -0.18131624162197113, -0.25146511197090149, -0.061138596385717392, 0.39569553732872009, 0.33406654000282288, -0.26285302639007568, -0.23661769926548004, -0.11619073152542114, 0.26416647434234619, 0.098298855125904083, -0.5597383975982666, 0.71752685308456421, 0.17070417106151581, -0.44443774223327637, 0.22708915174007416, -0.24403005838394165, 0.13023565709590912, -0.031432498246431351, 1.0410431623458862, -0.15240873396396637, -0.014204404316842556, 0.2474617213010788, 0.6820407509803772, 
  -0.25018775463104248, -0.076094180345535278, 0.15799424052238464, -0.29022443294525146, 0.14347988367080688, 0.025159686803817749, -0.19350478053092957, -0.028053313493728638, -0.0084469616413116455, -0.10455216467380524, -0.27474060654640198, -0.11380699276924133, -0.25408995151519775, -0.21044430136680603, -0.22190713882446289, -0.15512628853321075, 0.018816590309143066, -0.17575147747993469, -0.16263310611248016, 0.11394962668418884, -0.14789237082004547, 0.24631428718566895, -0.16194131970405579, 0.23375749588012695, -0.12896953523159027, -0.25915861129760742, -0.011736363172531128, -0.084688335657119751, -0.26540571451187134, -0.20575335621833801, 0.13725376129150391, -0.12879766523838043, -0.18858551979064941, -0.26770460605621338, 0.29331862926483154, 0.23481100797653198, 0.082433968782424927, -0.20019567012786865, -0.22932684421539307, -0.099578961730003357, -0.21616922318935394, 0.059855431318283081, -0.17826126515865326, 0.15318208932876587, 0.0079234838485717773, -0.046335667371749878, 0.29847913980484009, 
  -0.0096545815467834473, 0.22351378202438354, 0.015635937452316284, -0.145692378282547, -0.050802573561668396, -0.097710013389587402, 0.088588595390319824, -0.039344102144241333, 0.21384716033935547, 0.20177531242370605, -0.2403673529624939, 0.23526251316070557, 0.2047087550163269, -0.0034174025058746338, -0.0047873556613922119, -0.12187032401561737, -0.0082423388957977295, -0.24899974465370178, -0.15826615691184998, 0.080186158418655396, -0.11241443455219269, -0.27266091108322144, 0.23335051536560059, -0.23347276449203491, -0.019827872514724731, 0.0078123211860656738, -0.19245192408561707, -0.12519019842147827, 0.10494914650917053, 0.23547405004501343, -0.20744521915912628, 0.043743908405303955, 0.25121444463729858, -0.18552100658416748, 0.025649905204772949, 0.10300201177597046, -0.2715144157409668, 0.064295530319213867, 0.018130034208297729, -0.038033753633499146, -0.19480538368225098, -0.20601683855056763, 0.078204423189163208, 0.16620975732803345, 0.00183868408203125, -0.24034053087234497, -0.27759701013565063, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,47 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data5[10*20] = { 
  0.155190110206604, -0.29567396640777588, -0.2588837742805481, 0.049101203680038452, 0.38123911619186401, 0.05985337495803833, 0.43442118167877197, -0.4011930525302887, -0.022048354148864746, -0.19483354687690735, 0.089250504970550537, 0.071906685829162598, 0.24257105588912964, 0.43536907434463501, 0.20777857303619385, -0.31586644053459167, 0.00019213557243347168, -0.10031795501708984, -0.26989120244979858, 0.094074904918670654, 
  -0.21513541042804718, -0.43652644753456116, 0.25989925861358643, 0.25670373439788818, 0.20556908845901489, -0.15646842122077942, -0.19914223253726959, -0.36983609199523926, -0.35554879903793335, 0.069873809814453125, -0.20073221623897552, -0.2023371160030365, 0.2409820556640625, 0.084498703479766846, 0.26755255460739136, 0.3430597186088562, -0.19190970063209534, 0.13136303424835205, -0.1693665087223053, -0.11774033308029175, 
  -0.086540102958679199, -0.36983108520507812, -0.011426568031311035, 0.40303337574005127, -0.18503651022911072, -0.22609998285770416, -0.13627669215202332, 0.078819572925567627, -0.15676471590995789, -0.043710947036743164, 0.12338340282440186, 0.19389015436172485, -0.081969767808914185, -0.33017858862876892, -0.050489902496337891, -0.26666605472564697, 0.32243669033050537, -0.3727266788482666, -0.38322222232818604, -0.30915829539299011, 
  0.22162771224975586, 0.04779684916138649, 0.35653865337371826, 0.0099092144519090652, -0.25352272391319275, 0.29372084140777588, -0.22272127866744995, -0.17870917916297913, -0.11073149740695953, 0.28100210428237915, 0.38021460175514221, 0.18160040676593781, -0.28030186891555786, -0.35961630940437317, -0.016391962766647339, -0.17503425478935242, -0.10153305530548096, -0.20912358164787292, 0.40465575456619263, 0.32163810729980469, 
  -0.17334240674972534, 0.22836561501026154, -0.36821791529655457, -0.16412797570228577, -0.32421711087226868, 0.26705628633499146, -0.13781583309173584, 0.10251128673553467, -0.35356351733207703, 0.23458927869796753, 0.34554034471511841, 0.21845455467700958, -0.077009856700897217, 0.18902230262756348, 0.094670414924621582, -0.36412426829338074, -0.18604752421379089, 0.37049597501754761, 0.27800458669662476, 0.22064423561096191, 
  -0.3295840322971344, 0.28178730607032776, -0.25742924213409424, 0.20737794041633606, -0.11647129058837891, -0.44642287492752075, -0.025772631168365479, 0.31185275316238403, -0.43384477496147156, -0.17979496717453003, 0.29691082239151001, 0.24155941605567932, -0.19458532333374023, 0.23980724811553955, -0.091879725456237793, -0.25223618745803833, -0.14094427227973938, 0.21926040947437286, -0.25955837965011597, 0.015761494636535645, 
  0.35197710990905762, 0.18086844682693481, -0.22562752664089203, -0.30041342973709106, 0.30746638774871826, 0.30070459842681885, 0.0431995689868927, -0.12744566798210144, -0.10124102234840393, 0.0096309185028076172, 0.23893839120864868, 0.15596038103103638, -0.27470189332962036, -0.1570727527141571, 0.034872889518737793, -0.06756243109703064, 0.22909986972808838, -0.068544209003448486, -0.061746180057525635, -0.13303959369659424, 
  -0.067545421421527863, 0.32706436514854431, 0.16648270189762115, 0.21566943824291229, -0.04401823878288269, 0.329703688621521, 0.33456879854202271, -0.4487820565700531, 0.41665118932723999, -0.11473512649536133, -0.22680288553237915, 0.41144078969955444, 0.25406181812286377, -0.10319361090660095, -0.38276225328445435, 0.18021084368228912, 0.32872921228408813, 0.034249596297740936, 0.051685571670532227, 0.32153928279876709, 
  0.22869144380092621, 0.14304393529891968, 0.19833587110042572, 0.14442084729671478, 0.33456456661224365, 0.1278454065322876, -0.41686040163040161, -0.11441827565431595, -0.12649032473564148, 0.047066181898117065, 0.3613685667514801, 0.0687909796833992, -0.018651306629180908, -0.40212592482566833, -0.1313498318195343, 0.35638344287872314, -0.33315008878707886, 0.27908807992935181, -0.18146216869354248, -0.12500813603401184, 
  0.16364480555057526, -0.30357357859611511, -0.076898820698261261, -0.036312352865934372, 0.30661648511886597, 0.38615024089813232, -0.076080828905105591, 0.010926779359579086, 0.26892486214637756, -0.35648933053016663, -0.23153732717037201, 0.15872520208358765, -0.28586220741271973, -0.2070196121931076, 0.21444606781005859, -0.091308601200580597, -0.070471644401550293, 0.33400636911392212, 0.010248482227325439, 0.29526698589324951, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data6[3*10] = { 
  0.39415240287780762, 0.076462864875793457, 0.57208549976348877, -0.51522642374038696, -0.27190613746643066, 0.29021561145782471, 0.47403800487518311, -0.52198457717895508, -0.65974724292755127, 0.48390483856201172, 
  0.37098610401153564, 0.38633811473846436, -0.12294971942901611, -0.42474204301834106, -0.51706904172897339, 0.10061086714267731, 0.19430428743362427, -0.50526726245880127, 0.078279152512550354, -0.10752015560865402, 
  -0.54579639434814453, -0.12115943431854248, 0.66433978080749512, -0.0039563053287565708, -0.65415787696838379, -0.53286641836166382, -0.54826551675796509, -0.31346431374549866, 0.60826623439788818, 0.16158439218997955, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 188, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 3760, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 120, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 192), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
